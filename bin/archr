#!/usr/bin/env node

/**
 * archr - Search for and download Arch Linux packages
 * https://github.com/gavinhungry/archr
 */

(function() {
  'use strict';

  var pjson    = require('../package.json');
  var archr    = require('../lib/archr.js');
  var Download = require('download');
  var prompt   = require('prompt');
  var Q        = require('q');
  var queue    = require('queue');
  var sprintf  = require('sprintf');

  var app = require('commander')
    .version(pjson.version)
    .option('-s, --search', 'search for all packages')
    .option('-d, --download', 'download package')
    .option('-p, --package <pkg>', 'package name or query')
    .option('-r, --repo <repo>', sprintf('package repository name [%s]', archr.defaults.repo))
    .option('-a, --arch <arch>', sprintf('system architecture [%s]', archr.defaults.arch))
    .option('-c, --concurrency <n>', 'number of concurrency downloads [1]')
    .option('-D, --dir <dir>', 'path to save downloads')
    .option('-q, --quiet', 'no version output')
    .parse(process.argv);

  var cwd = process.cwd();

  // default prompt options
  prompt.message = prompt.delimiter = '';
  prompt.colors = false;

  /**
   * Exit now
   *
   * @param {Number} [code] - exit code
   * @param {String} [msg] - exit message
   */
  var exit = function(code, msg) {
    code = code || 0;

    if (msg) {
      var output = (code === 0) ? 'log' : 'error';
      console[output](msg);
    }

    process.exit(code);
  };

  /**
   * Allow for -p linux -r core or -p core/linux
   *
   * @param {String} pkgname - package name or repo/package
   * @param {String} repo - package repository name fallback
   * @return {Object} { pkgname, repo }
   */
  var split = function(pkgname, repo) {
    if (pkgname) {
      var s = pkgname.split('/');
      if (s.length > 1) {
        repo = s[0]
        pkgname = s[1];
      }
    }

    return {
      pkgname: pkgname,
      repo: repo
    };
  };

  /**
   * Download a file
   *
   * @param {String} uri - file URI
   * @param {String} [dir] - path to download to, defaults to process.cwd
   * @return {Promise} to resolve to saved path, or reject with error
   */
  var download = function(uri, dir) {
    var d = Q.defer();
    dir = dir || cwd;

    var dl = new Download({ mode: '0644' }).get(uri).dest(dir);

    console.log('Downloading', uri);
    dl.run(function(err, files, stream) {
      if (err) { return d.reject(err); }
      d.resolve(files[0].path);
    });

    return d.promise;
  };

  /**
   * Download multiple files
   *
   * @param {Array} uris - file URIs
   * @param {String} [dir] - path to download to, defaults to process.cwd
   * @return {Promise} to resolve to saved paths
   */
  var downloads = function(uris, dir) {
    var d = Q.defer();
    dir = dir || cwd;

    var paths = [];
    var dls = queue({
      concurrency: parseInt(app.concurrency, 10)
    });

    uris.forEach(function(uri) {
      dls.push(function(done) {
        download(uri, dir).then(function(path) {
          paths.push(path);
        }).finally(done);
      });
    })

    dls.start(function() {
      d.resolve(paths);
    });

    return d.promise;
  };

  var args = split(app.package, app.repo);

  if (app.download) {
    if (app.search) {
      prompt.confirm('Download multiple packages from search results? [y/N]', {
        pattern: /.*/
      }, function(err, ok) {
        if (err) { exit(1); }
        if (!ok) { exit(0); }

        archr.search(args.pkgname, args.repo, app.arch)
          .then(function(results) {

          var uris = results.map(archr.uri);

          downloads(uris).fail(function(err) {
            exit(1, 'Error downloading files');
          });

        }, function(err) {
          exit(1, 'Search error');
        });

      });
    } else {
      archr
        .download(args.pkgname, args.repo, app.arch, app.dir)
        .then(function(uri) {

        download(uri, app.dir).fail(function(err) {
          exit(1);
        });

      }, function(err) {
        exit(1, 'Package not found');
      }).done();
    }
  }

  else if (app.search) {
    archr.search(args.pkgname, args.repo, app.arch).then(function(results) {
      results.forEach(function(pkg) {
        var output = sprintf('%s/%s', pkg.repo, pkg.pkgname);

        if (!app.quiet) {
          output += sprintf(' %s-%s', pkg.pkgver, pkg.pkgrel);
        }

        console.log(output);
      });
    }, function(err) {
      exit(1, 'Search error');
    });
  }

  else {
    app.outputHelp();
  }

})();
