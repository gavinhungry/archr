#!/usr/bin/env node

/**
 * archr - Search for and download Arch Linux packages
 * https://github.com/gavinhungry/archr
 */

(function() {
  'use strict';

  var pjson = require('../package.json');
  var archr = require('../lib/archr.js');

  var async    = require('async');
  var colors   = require('colors/safe');
  var download = require('download');
  var sprintf  = require('sprintf');

  /**
   * Split repo and pkgname apart
   *
   * @param {String} pkgname - package name or repo/package
   * @return {Object} { repo, pkgname }
   */
  var split = function(pkgname) {
    var repo = null;

    var s = pkgname.split('/');
    if (s.length > 1) {
      repo = s[0]
      pkgname = s[1];
    }

    return {
      repo: repo,
      pkgname: pkgname
    };
  };

  var cli = {
    /**
     * Exit now
     *
     * @param {Number} [code] - exit code
     * @param {String} [msg] - exit message
     */
    exit: function(code, msg) {
      code = code || 0;

      if (msg) {
        var output = (code === 0) ? 'log' : 'error';
        console[output](msg);
      }

      process.exit(code);
    },

    /**
     * Print search results
     *
     * @param {String} query
     * @return {Promise}
     */
    search: function(query) {
      var args = split(query);

      return archr.search(args.pkgname, args.repo, app.arch).then(function(results) {
        results.map(function(pkg) {
          var line = sprintf('%s/%s', pkg.repo, pkg.pkgname);

          if (!app.quiet) {
            line += sprintf(' %s-%s', pkg.pkgver, pkg.pkgrel);
          }

          return line;
        }).sort().forEach(function(line) {
          console.log(line);
        });
      }, function(err) {
        cli.exit(1, 'Search error');
      });
    },

    /**
     * Download a file
     *
     * @param {String} uri - file URI
     * @return {Promise}
     */
    download: function(uri) {
      console.log('Downloading', uri);
      return download(uri, app.dir).catch(function(err) {
        console.error(colors.red(sprintf('Error: %s', err.message)));
      });
    },

    /**
     * Download multiple files
     *
     * @param {Array} uris - file URIs
     * @return {Promise} to resolve to saved paths
     */
    downloads: function(uris) {
      return new Promise(function(res, rej) {
        async.mapSeries(uris, function(uri, callback) {
          cli.download(uri).then(function() {
            callback();
          });
        }, res);
      });
    }
  };

  var app = require('commander')
    .version(pjson.version)
    .option('-a, --arch <arch>', sprintf('system architecture [%s]', archr.defaults.arch))
    .option('-d, --dir <dir>', 'path to save downloads', process.cwd())
    .option('-q, --quiet', 'no version output');

  app.command('search <query>').action(cli.search);

  app.command('download <pkg> [pkg...]').action(function(pkg, pkgs) {
    pkgs.unshift(pkg);

    var uris_p = pkgs.map(split).map(function(pkg) {
      return archr.getUri(pkg.pkgname, pkg.repo, app.arch).catch(function() {
        console.error(colors.red(sprintf('Error: Could not find package [%s/%s]',
          pkg.repo || archr.defaults.repo, pkg.pkgname)));
      });
    });

    return Promise.all(uris_p).then(function(uris) {
      return cli.downloads(uris.filter(Boolean));
    });
  });

  if (process.argv.length <= 2) {
    app.help();
  }

  app.parse(process.argv);

})();
