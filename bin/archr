#!/usr/bin/env node

/**
 * archr - Search for and download Arch Linux packages
 * https://github.com/gavinhungry/archr
 */

(() => {
  'use strict';

  const pjson = require('../package.json');
  const archr = require('../lib/archr.js');

  const async    = require('async');
  const colors   = require('colors/safe');
  const download = require('download');
  const sprintf  = require('sprintf');

  /**
   * Split repo and pkgname apart
   *
   * @param {String} pkgname - package name or repo/package
   * @return {Object} { repo, pkgname }
   */
  let split = pkgname => {
    let repo = null;

    let s = pkgname.split('/');
    if (s.length > 1) {
      repo = s[0]
      pkgname = s[1];
    }

    return {
      repo: repo,
      pkgname: pkgname
    };
  };

  let cli = {
    /**
     * Exit now
     *
     * @param {Number} [code] - exit code
     * @param {String} [msg] - exit message
     */
    exit: (code, msg) => {
      code = code || 0;

      if (msg) {
        let output = (code === 0) ? 'log' : 'error';
        console[output](msg);
      }

      process.exit(code);
    },

    /**
     * Print search results
     *
     * @param {String} query
     * @return {Promise}
     */
    search: async query => {
      let { pkgname, repo } = split(query);

      let results = await archr.search(pkgname, repo, app.arch).catch(err => {
        cli.exit(1, 'Search error');
      });

      results.map(pkg => {
        let line = sprintf('%s/%s', pkg.repo, pkg.pkgname);

        if (!app.quiet) {
          line += sprintf(' %s-%s', pkg.pkgver, pkg.pkgrel);
        }

        return line;
      }).sort().forEach(line => {
        console.log(line);
      });
    },

    /**
     * Download a file
     *
     * @param {String} uri - file URI
     * @return {Promise}
     */
    download: uri => {
      console.log('Downloading', uri);
      return download(uri, app.dir).catch(err => {
        console.error(colors.red(sprintf('Error: %s [%s]',
          err.message, err.code || err.statusCode)));
      });
    },

    /**
     * Download multiple files
     *
     * @param {Array.<String>} uris - file URIs
     * @return {Promise} to resolve to saved paths
     */
    downloads: uris => {
      return new Promise((res, rej) => {
        async.mapSeries(uris, (uri, callback) => {
          cli.download(uri).then(() => {
            callback();
          });
        }, res);
      });
    }
  };

  let app = require('commander')
    .version(pjson.version)
    .option('-a, --arch <arch>', sprintf('system architecture [%s]', archr.defaults.arch))
    .option('-d, --dir <dir>', 'path to save downloads', process.cwd())
    .option('-q, --quiet', 'no version output');

  app.command('search <query>').action(cli.search);

  app.command('download <pkg> [pkg...]').action((pkg, pkgs) => {
    pkgs.unshift(pkg);

    let uris_p = pkgs.map(split).map(pkg => {
      return archr.uri(pkg.pkgname, pkg.repo, app.arch).catch(() => {
        console.error(colors.red(sprintf('Error: Could not find package [%s/%s]',
          pkg.repo || archr.defaults.repo, pkg.pkgname)));
      });
    });

    return Promise.all(uris_p).then(uris => {
      return cli.downloads(uris.filter(Boolean));
    });
  });

  if (process.argv.length <= 2) {
    app.help();
  }

  app.parse(process.argv);

})();
